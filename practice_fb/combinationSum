public class Solution {
public List<List<Integer>> combinationSum(int[] candidates,
int target) {
List<List<Integer>> rst = new ArrayList<>();
dfs(rst, new ArrayList<>(), candidates, target, 0, 0);
return rst;
}
private void dfs(List<List<Integer>> rst, List<Integer> list
, int[] nums, int target, int sum, int start){
if(sum > target) return;
if(sum == target){
rst.add(new ArrayList<Integer>(list));
return;
}
for(int i = start; i < nums.length; i++){
list.add(nums[i]);
dfs(rst, list, nums, target, sum + nums[i], i);
list.remove(list.size() - 1);
}
}
}
